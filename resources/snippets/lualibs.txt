math
local math = require("math")
math.maxinteger
math.mininteger
math.huge
math.pi
math.abs(n)
math.acos(n)
math.asin(n)
math.atan(n)
math.atan2(n)
math.ceil(n)
math.cos(n)
math.cosh(n)
math.deg(n)
math.exp(n)
math.floor(n)
math.fmod(n)
math.frexp(n)
math.ldexp(n)
math.log(n,m)
math.log10(n)
math.max(n)
math.min(n)
math.modf(n)
math.pow(n,m)
math.rad(n)
math.random(n,m)
math.randomseed(n)
math.sin(n)
math.sinh(n)
math.sqrt(n)
math.tan(n)
math.tanh(n)
math.tointeger(n)
math.ult(m,n)
math.huge
io
local io = require("io")
io.open(f,m)
io.close(f)
io.flush()
io.input(f)
io.lines(f)
io.output(f)
io.read(f)
io.tmpfile()
io.type(o)
io.write(s)
string
string.byte()
string.char()
string.dump(f)
string.find(s,p,i,p)
string.format()
string.gmatch(s,p)
string.gsub(s,p,r,n)
string.len(s)
string.lower(s)
string.match(s,p,i)
string.rep(s,n)
string.reverse(s)
string.sub(s,i)
string.upper(s)
:byte()
:char()
:dump()
:find()
:format()
:gmatch()
:gsub()
:len()
:lower()
:match()
:rep()
:reverse()
:sub()
:upper()
os
os.clock()
os.date(f)
os.difftime(t2,t1)
os.execute(c)
os.exit(exitcode)
os.getenv(v)
os.remove(f)
os.rename(oldname,newname)
os.setlocale(l)
os.time(t)
os.tmpname()
bit
bit.tobit(n)
bit.tohex(n)
bit.bnot(n)
bit.band(n)
bit.bor(n)
bit.bxor(n)
bit.lshift(n,m)
bit.rshift(n,m)
bit.arshift(n,m)
bit.rol(n,m)
bit.ror(n,m)
bit.bswap(n)
coroutine
coroutine.yield()
coroutine.yield(t)
coroutine.create(threadname)
coroutine.resume(threadname)
coroutine.status(threadname)
coroutine.running()
coroutine.isyieldable()
coroutine.wrap(threadname)
table
table.concat(list [, sep [, i [, j]]])
table.insert(list, [pos,] value)
table.move(a1, f, e, t [,a2])
table.pack()
table.remove(list [, pos])
table.unpack (list [, i [, j]])
file:flush()
file:lines(...)
file:read(...)
file:seek([whence[,offset]])
file:setvbuf(mode[,size])
file:write(...)
debug
debug.debug()
debug.gethook([thread])
debug.getinfo([thread,]f[,what])
debug.getlocal([thread,]f,local)
debug.getmetatable(v)
debug.getregistry()
debug.getupvalue(f,up)
debug.getuservalue(u)
debug.sethook([thread,] hook, mask [, count])
debug.setlocal([thread,] level, local, value)
debug.setmetatable(value, table)
debug.setupvalue(f, up, value)
debug.setuservalue(udata, value)
debug.traceback([thread,] [message [, level]])
debug.upvalueid(f, n)
debug.upvaluejoin(f1, n1, f2, n2)
package
package.config
package.cpath
package.loaded
package.loadlib(libname,f)
package.path
package.preload
package.searchers
package.searchpath(name,path[,sep[,rep]])
utf8
utf8.char()
utf8.charpattern
utf8.codes(s)
utf8.codepoint(s [, i [, j]])
utf8.len(s [, i [, j]])
utf8.offset(s, n [, i])