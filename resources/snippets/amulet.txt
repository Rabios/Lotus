math.sign(n)
math.fract(v)
math.clamp(v,min,max)
math.randvec2()
math.randvec3()
math.randvec4()
math.dot(vector1,vector2)
math.cross(vector1,vector2)
math.normalize(vector)
math.length(vector)
math.distance(vector1,vector2)
math.inverse(matrix)
math.lookat(eye,center,up)
math.perspective(fovy,aspect,near,far)
math.ortho(left,right,bottom,top[,near,far])
math.oblique(angle,zscale,left,right,bottom,top[,near,far])
math.translate4(position)
math.scale4(scaling)
math.rotate4(rotation)
math.perlin(pos[,period])
math.simplex(pos)
math.mix(from,to,t)
math.slerp(from,to,t)
am.buffer(size)
am.load_buffer(filename)
am.base64_encode(buffer)
am.base64_decode(string)
buffer:view(type[,offset[,stride[,count]]])
view.buffer
view:slice(n[,count[,stride_multiplier]])
view:set(val[,start[,count]])
am.float_array(table)
am.byte_array(table)
am.ubyte_array(table)
am.byte_norm_array(table)
am.ubyte_norm_array(table)
am.short_array(table)
am.ushort_array(table)
am.short_norm_array(table)
am.ushort_norm_array(table)
am.int_array(table)
am.uint_array(table)
am.int_norm_array(table)
am.uint_norm_array(table)
am.ushort_elem_array(table)
am.uint_elem_array(table)
am.vec2_array(table)
am.vec3_array(table)
am.vec4_array(table)
am.struct_array(size,spec)
am.window(settings)
window
window.left
window.right
window.bottom
window.top
window.width
window.height
window.pixel_width
window.pixel_height
window.safe_left
window.safe_right
window.safe_bottom
window.safe_top
window.mode
window.clear_color
window.stencil_clear_value
window.letterbox
window.lock_pointer
window.show_cursor
window.scene
window.projection
window:close()
window:resized()
window:key_down(key)
window:keys_down()
window:key_pressed(key)
window:keys_pressed()
window:key_released(key)
window:keys_released()
window:mouse_position()
window:mouse_norm_position()
window:mouse_pixel_position()
window:mouse_delta()
window:mouse_norm_delta()
window:mouse_pixel_delta()
window:mouse_down(button)
window:mouse_pressed(button)
window:mouse_released(button)
window:mouse_wheel()
window:mouse_wheel_delta()
window:touches_began()
window:touches_ended()
window:active_touches()
window:touch_began([touch])
window:touch_ended([touch])
window:touch_active([touch])
window:touch_position([touch])
window:touch_norm_position([touch])
window:touch_pixel_position([touch])
window:touch_delta([touch])
window:touch_norm_delta([touch])
window:touch_pixel_delta([touch])
window:touch_force([touch])
window:touch_force_available()
node
node.hidden
node.paused
node.num_children
node.recursion_limit
node:tag(tagname)
node:untag(tagname)
node:all(tagname[,recurse])
node(tagname)
node:action([id,]action)
node:late_action([id,]action)
node:cancel(id)
node:update()
node:append(child)
node:prepend(child)
node:remove(child)
node:remove(tagname)
node:remove_all()
node:replace(child,replacement)
node:replace(tagname,replacement)
node:child(n)
node:child_pairs()
ams
am.group(children)
am.text([font,]string[,color][,halign[,valign]])
am.sprite(source[,color][,halign[,valign]])
am.rect(x1,y1,x2,y2[,color])
am.circle(center,radius[,color[,sides]])
am.line(point1,point2[,thickness[,color]])
am.particles2d(settings)
am.translate([uniform,]position)
am.scale([uniform,]scaling)
am.rotate([uniform,]rotation)
am.transform([uniform,]matrix)
am.use_program(program)
am.bind(bindings)
am.draw(primitive[,elements][,first[,count]])
am.blend(mode)
am.color_mask(red,green,blue,alpha)
am.cull_face(face)
am.depth_test(func[,mask])
am.stencil_test(settings)
am.viewport(left,bottom,width,height)
am.lookat([uniform,]eye,center,up)
am.cull_sphere([uniforms...,]radius[,center])
am.cull_box([uniforms...,]min,max)
am.billboard([uniform,][preserve_scaling])
am.read_uniform(uniform)
am.quads(n,spec[,usage])
am.postprocess(settings)
am.wrap(node)
am.program(vertex_shader,fragment_shader)
am.image_buffer([buffer,]width[,height])
am.load_image(filename)
image_buffer:save_png(filename)
image_buffer:paste(src,x,y)
am.encode_png(image_buffer)
am.decode_png(buffer)
am.texture2d(width[,height])
am.texture2d(image_buffer)
am.texture2d(filename)
texture
texture.width
texture.height
texture.image_buffer
texture.minfilter
texture.magfilter
texture.filter
texture.swrap
texture.twrap
texture.wrap
am.framebuffer(texture[,depth_buf[,stencil_buf]])
framebuffer
framebuffer.clear_color
framebuffer.stencil_clear_value
framebuffer.projection
framebuffer.pixel_width
framebuffer.pixel_height
framebuffer:render(node)
framebuffer:render_children(node)
framebuffer:clear([color[,depth[,stencil]]])
framebuffer:read_back()
framebuffer:resize(width,height)
am.delay(seconds)
am.series(actions)
am.parallel(actions)
am.loop(func)
am.tween([target,]time,values[,ease])
am.wait(action)
am.frame_time
am.delta_time
am.current_time()
am.save_state(key,state[,format])
am.load_state(key,[,format])
am.audio_buffer(buffer,channels,sample_rate)
am.load_audio(filename)
audio_buffer
audio_buffer.channels
audio_buffer.sample_rate
audio_buffer.samples_per_channel
audio_buffer.length
audio_buffer.buffer
am.track(buffer[,loop[,playback_speed[,volume]]])
track
track.playback_speed
track.volume
track:reset([position])
am.play(source,loop,pitch,volume)
am.sfxr_synth(settings)
am.controller_present(index)
am.controller_attached(index)
am.controller_detached(index)
am.controllers_present()
am.controllers_attached()
am.controllers_detached()
am.controller_lt_val(index)
am.controller_rt_val(index)
am.controller_lstick_pos(index)
am.controller_rstick_pos(index)
am.controller_button_pressed(index,button)
am.controller_button_released(index,button)
am.controller_button_down(index,button)
am.load_obj(filename)
table
table.shallow_copy(t)
table.deep_copy(t)
table.search(arr,elem)
table.shuffle(t[,rand])
table.clear(t)
table.remove_all(arr,elem)
table.append(arr1,arr2)
table.merge(t1,t2)
table.keys(t)
table.values(t)
table.filter(arr,f)
table.tostring(t)
table.count(t)
log(msg,...)
noglobals()
am.glob(patterns)
am.eval_js(js)
am.to_json(value)
am.parse_json(json)
am.load_script(filename)
am.load_string(filename)
am.perf_stats()
am.version
am.platform
am.language()
am.init_gamecenter()
am.gamecenter_available()
am.submit_gamecenter_score(leaderboard_id,score)
am.submit_gamecenter_achievement(achievment_id)
am.show_gamecenter_leaderboard(leaderboard_id)